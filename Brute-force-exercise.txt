```
Exercise 1:
หา perfect number ในช่วง a..b
input: a, b
output: x โดยที่  a <= x <= b และ x เป็น perfect number (ถ้าไม่มีให้ตอบ -1)
```

Solution:
1. p => perfect number 
2. { a, a+1, a+2, ..., b, -1} => size = b - a + 2
3. T(x) คือ function ที่หาผลบวกของ factor ของ x โดยที่ ไม่นับfactorที่เท่ากับ x แล้วreturn ว่า ผลรวมนั้นเท่ากับ x หรือไม่
bool T(int x){
    int sum = 0;
    for(int i=1;i<x;++i){
        if(x%i == 0) sum+=i;
    }
    return x == sum;
}
int perfect_number(int a,int b){
    for(int i =a, i<=b;++i){
        if(T(i)) return i;
    }
    return -1;
}

```
Exercise 2:
หา สี่เหลี่ยมเล็กที่สุดที่ครอบคลุมทุกจุด 2 มิติที่กำหนดให้
input: อาเรย์ 2 มิติ A[1..R][1..C] โดยที่ A[i][j] มีค่าเป็น true หรือ false (ช่องไหนเป็น true แปลว่า ที่พิกัด (i,j) มีจุดอยุ่)
output: สี่เหลี่ยม โดยให้ระบุ (r1,c1) และ (r2,c2) ซึ่งเป็นพิกัดของจุดบนซ้าย และ ล่างขวา ของสี่เหลี่ยมนั้น ที่ทำให้ ทุก ๆ A[i][j] ที่เป็น true อยู่ภายในสี่เหลี่ยมนี้
(กล่าวคือ สำหรับทุก ๆ (i,j) ที่่ A[i][j] == true นั้น r1 <= i <= r2 และ c1 <= j <= c2)

```

Solution:
1. [(r1,c1),(r2,c2)]
2. { 
    [(1,1),(1,1)],[(1,1),(1,2)],..., [(1,1),(1,C)], [(1,2),(1,2)],[(1,2),(1,3)],..., [(1,2),(1,C)], ..., [(1,C-1),(1,C-1)], [(1,C-1),(1,C)], [(1,C),(1,C)],
    [(1,1),(2,1)],[(1,1),(2,2)],..., [(1,1),(2,C)], [(1,2),(2,2)],[(1,2),(2,3)],..., [(1,2),(2,C)], ..., [(1,C-1),(2,C-1)], [(1,C-1),(2,C)], [(1,C),(2,C)],
    [(1,1),(3,1)],[(1,1),(3,2)],..., [(1,1),(3,C)], [(1,2),(3,2)],[(1,2),(3,3)],..., [(1,2),(3,C)], ..., [(1,C-1),(3,C-1)], [(1,C-1),(3,C)], [(1,C),(3,C)],
                                                                                ...                                          
    [(1,1),(R,1)],[(1,1),(R,2)],..., [(1,1),(R,C)], [(1,2),(R,2)],[(1,2),(R,3)],..., [(1,2),(R,C)], ..., [(1,C-1),(R,C-1)], [(1,C-1),(R,C)], [(1,C),(R,C)],

    [(2,1),(2,1)],[(2,1),(2,2)],..., [(2,1),(2,C)], [(2,2),(2,2)],[(2,2),(2,3)],..., [(2,2),(2,C)], ..., [(2,C-1),(2,C-1)], [(2,C-1),(2,C)], [(2,C),(2,C)],
    [(2,1),(3,1)],[(2,1),(3,2)],..., [(2,1),(3,C)], [(2,2),(3,2)],[(2,2),(3,3)],..., [(2,2),(3,C)], ..., [(2,C-1),(3,C-1)], [(2,C-1),(3,C)], [(2,C),(3,C)],
    [(2,1),(4,1)],[(2,1),(4,2)],..., [(2,1),(4,C)], [(2,2),(4,2)],[(2,2),(4,3)],..., [(2,2),(4,C)], ..., [(2,C-1),(4,C-1)], [(2,C-1),(4,C)], [(2,C),(4,C)],
                                                                                ...                                          
    [(2,1),(R,1)],[(2,1),(R,2)],..., [(2,1),(R,C)], [(2,2),(R,2)],[(2,2),(R,3)],..., [(2,2),(R,C)], ..., [(2,C-1),(R,C-1)], [(2,C-1),(R,C)], [(2,C),(R,C)],

    .
    .
    .

    [(R-1,1),(R-1,1)],[(R-1,1),(R-1,2)],..., [(R-1,1),(R-1,C)], [(R-1,2),(R-1,2)],[(R-1,2),(R-1,3)],..., [(R-1,2),(R-1,C)], ..., [(R-1,C-1),(R,C-1)], [(R-1,C-1),(R-1,C)], [(R-1,C),(R-1,C)],
    [(R-1,1),(R,1)],[(R-1,1),(R,2)],..., [(R-1,1),(R,C)], [(R-1,2),(R,2)],[(R-1,2),(R,3)],..., [(R-1,2),(R,C)], ..., [(R,C-1),(R,C-1)], [(R-1,C-1),(R,C)], [(R-1,C),(R,C)],                                          
    [(R,1),(R,1)],[(R,1),(R,2)],..., [(R,1),(R,C)], [(R,2),(R,2)],[(R,2),(R,3)],..., [(R,2),(R,C)], ..., [(R,C-1),(R,C-1)], [(R,C-1),(R,C)], [(R,C),(R,C)],
   }
3.
